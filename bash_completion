##
# .bash_completion - User bash completion.
#
# This file will automatically be sourced on systems that have bash
# completion installed.
#
# Based in part on:
# https://launchpad.net/bash-completion/master/1.1/+download/bash-completion-1.1.tar.gz
# http://mult.ifario.us/p/getting-bash-completion-magic-on-os-x
# https://github.com/rtomayko/dotfiles/blob/rtomayko/.bash_completion

# We may not have the full bash_completion package installed, so create a handful of
# required functions from bash_completion 1.1 if they don't exist.
# NOTE: We only support bash 3+.

# These version variables are safe to declare because if they were defined elsewhere, they are read-only.
if [ ${BASH_VERSINFO[0]} -gt 2 ]; then
  declare -r bash3=$BASH_VERSION 2>/dev/null || :
  bashdefault="-o bashdefault"
  compopt=:
  default="-o default"
  dirnames="-o dirnames"
  filenames="-o filenames"
  nospace="-o nospace"
  plusdirs="-o plusdirs"
fi
if [ ${BASH_VERSINFO[0]} -gt 3 ]; then
  declare -r bash4=$BASH_VERSION 2>/dev/null || :
  compopt=compopt
fi

## This function quotes the argument in a way so that readline dequoting results in the original argument
type -t quote_readline >/dev/null ||
quote_readline()
{
  if [ -n "$bash4" ]; then
    ## This function isn't really necessary on bash 4
    ## See: http://lists.gnu.org/archive/html/bug-bash/2009-03/msg00155.html
    echo "${1}"
    return
  fi
  local t="${1//\\/\\\\}"
  echo \'${t//\'/\'\\\'\'}\' ##'# Help vim syntax highlighting
}

type -t _get_cword >/dev/null ||
_get_cword()
{
  if [ -n "$bash4" ] ; then
    __get_cword4 "$@"
  else
    __get_cword3
  fi
} # _get_cword()

type -t __get_cword3 >/dev/null ||
__get_cword3()
{
  if [[ "${#COMP_WORDS[COMP_CWORD]}" -eq 0 ]] || [[ "$COMP_POINT" == "${#COMP_LINE}" ]]; then
    printf "%s" "${COMP_WORDS[COMP_CWORD]}"
  else
    local i
    local cur="$COMP_LINE"
    local index="$COMP_POINT"
    for (( i = 0; i <= COMP_CWORD; ++i )); do
      while [[
        ## Current COMP_WORD fits in $cur?
        "${#cur}" -ge ${#COMP_WORDS[i]} &&
        ## $cur doesn't match COMP_WORD?
        "${cur:0:${#COMP_WORDS[i]}}" != "${COMP_WORDS[i]}"
        ]]; do
        ## Strip first character
        cur="${cur:1}"
        ## Decrease cursor position
        index="$(( index - 1 ))"
      done

      ## Does found COMP_WORD matches COMP_CWORD?
      if [[ "$i" -lt "$COMP_CWORD" ]]; then
        ## No, COMP_CWORD lies further;
        local old_size="${#cur}"
        cur="${cur#${COMP_WORDS[i]}}"
        local new_size="${#cur}"
        index="$(( index - old_size + new_size ))"
      fi
    done

    if [[ "${COMP_WORDS[COMP_CWORD]:0:${#cur}}" != "$cur" ]]; then
      ## We messed up! At least return the whole word so things keep working
      printf "%s" "${COMP_WORDS[COMP_CWORD]}"
    else
      printf "%s" "${cur:0:$index}"
    fi
  fi
} # __get_cword3()

type -t __get_cword4 >/dev/null ||
__get_cword4()
{
  local i
  local LC_CTYPE=C
  local WORDBREAKS=$COMP_WORDBREAKS
  WORDBREAKS=${WORDBREAKS//\"/}
  WORDBREAKS=${WORDBREAKS//\'/}
  if [ -n "$1" ]; then
    for (( i=0; i<${#1}; ++i )); do
      local char=${1:$i:1}
      WORDBREAKS=${WORDBREAKS//$char/}
    done
  fi
  local cur=${COMP_LINE:0:$COMP_POINT}
  local tmp=$cur
  local word_start=`expr "$tmp" : '.*['"$WORDBREAKS"']'`
  while [ "$word_start" -ge 2 ]; do
    ## Get character before $word_start
    local char=${cur:$(( $word_start - 2 )):1}
    ## If the WORDBREAK character isn't escaped, exit loop
    if [ "$char" != "\\" ]; then
      break
    fi
    ## The WORDBREAK character is escaped; Recalculate $word_start
    tmp=${COMP_LINE:0:$(( $word_start - 2 ))}
    word_start=`expr "$tmp" : '.*['"$WORDBREAKS"']'`
  done

  cur=${cur:$word_start}
  printf "%s" "$cur"
} # __get_cword4()

type -t _filedir >/dev/null ||
_filedir()
{
  local IFS=$'\t\n' xspec

  _expand || return 0

  local -a toks
  local tmp

  toks=( ${toks[@]-} $(
  compgen -d -- "$(quote_readline "$cur")" | {
  while read -r tmp; do
    echo $tmp
  done
  }
  ))

  if [[ "$1" != -d ]]; then
    xspec=${1:+"!*.$1"}
    toks=( ${toks[@]-} $(
    compgen -f -X "$xspec" -- "$(quote_readline "$cur")" | {
    while read -r tmp; do
      [ -n $tmp ] && echo $tmp
    done
    }
    ))
  fi

  COMPREPLY=( "${COMPREPLY[@]}" "${toks[@]}" )
}

type -t _split_longopt >/dev/null ||
_split_longopt()
{
  if [[ "$cur" == --?*=* ]]; then
    ## Cut also backslash before '=' in case it ended up there for some reason.
    prev="${cur%%?(\\)=*}"
    cur="${cur#*=}"
    return 0
  fi

  return 1
}

type -t _expand >/dev/null ||
_expand()
{
  ## Expand ~username type directory specifications.  We want to expand
  ## ~foo/... to /home/foo/... to avoid problems when $cur starting with
  ## a tilde is fed to commands and ending up quoted instead of expanded.

  if [[ "$cur" == \~*/* ]]; then
    eval cur=$cur
  elif [[ "$cur" == \~* ]]; then
    cur=${cur#\~}
    COMPREPLY=( $( compgen -P '~' -u "$cur" ) )
    [ ${#COMPREPLY[@]} -eq 1 ] && eval COMPREPLY[0]=${COMPREPLY[0]}
    return ${#COMPREPLY[@]}
  fi
}

# Source the user completion directory.
: ${USER_BASH_COMPLETION_DIR:=~/.bash/completion.d}

[ -z "$USER_BASH_COMPLETION_DIR" ] && return 0

if [[ -d "$USER_BASH_COMPLETION_DIR" && -r "$USER_BASH_COMPLETION_DIR" \
      && -x "$USER_BASH_COMPLETION_DIR" ]]; then
  for i in "$USER_BASH_COMPLETION_DIR"/*; do
    # Not using @() here to support older bash.
    [[ ! ${i##*/} =~ \(~\$\|.bak\|.swp\|\#.*\#\|.dpkg.*\|.rpm.*\|Makefile.*\) \
      && -f "$i" && -r "$i" ]] && . "$i"
  done
fi
unset i

unset bashdefault compopt default dirnames filenames nospace plusdirs

# ex: ts=2 sw=2 et filetype=sh
